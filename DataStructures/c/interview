#include<stdio.h>
#include<math.h>
#include<string.h>
// C program to find factorial of a number.
int factorial(int n){
    int fact=1;
    for(int i=1; i<=n; i++){
        fact*=i;
    }
    return fact;
}
int factorial1(int n){
    if(n==1){
        return 1;
    }
    return n*factorial1(n-1);
}
// Swapping two bits of a byte using C program
void swapBits(unsigned char data){
    unsigned char bit_1 = (data >> 1)&1;
    unsigned char bit_2 = (data>>2)&1;
    unsigned char xor_of_bits = bit_1^bit_2;
    printf("Swapping of Bits after %2X\n", data ^ (bit_1 << 1 | bit_1 <<2));
}

// Program to swap two words/nibbles of a byte.
void swapWords(unsigned int data){
    data = ((data << 8) & 0xff00 | ((data >> 8) & 0x00ff));
    printf("Swapping of Words after %04X\n", data);
}

// C program to swap two numbers without using third variable.
void swapNumbers(int a, int b){
    int temp = a;
    a = b;
    b = temp;
    printf("After swap A = %d \t B = %d \n",a, b);
    a = a+b;
    b = a-b;
    a = a-b;
    printf("After swap A = %d \t B = %d \n",a, b);
    a = a*b;
    b = a/b;
    a = a/b;
    printf("After swap A = %d \t B = %d \n",a, b);
    a = a^b;
    b = a^b;
    a = a^b;
    printf("After swap A = %d \t B = %d \n",a, b);
    a = a+b - (b=a);
    printf("After swap A = %d \t B = %d \n",a, b);
}

// Program to reverse  number 
int reverseNum(int data){
    int rev=0, rem;
    while(data > 0){
        rem = data%10;
        rev= rev*10+rem;
        data/=10;
    }
    return rev;
}
// Program to check whether number is Perfect square or not
void perfectSquare(int num){
    int iVal;
    float fVal;

    fVal = sqrt(num);
    iVal = (int) fVal;
    if(iVal==fVal){
        printf("%d is A perfect Square\n", num);
    }else{
        printf("%d is Not a perfect Square\n", num);
    }
}
// Program to print "Hello World" without using semicolon.

void HelloWorld(){
    if(!printf("HelloWorld")){
        ;
    }else{
        printf("Bye");
    }
}

// Program to check whether number is palindrome or not.
void isPalandrome(int num){
    int rev=0,temp, rem;
    temp = num;
    while(temp>0){
        rem = temp%10;
        rev=rev*10+rem;
        temp/=10;
    } 
    if(num == rev){
        printf("%d is Palandrome\n", num);
    }else{
        printf("%d is not a palandrome\n", num);
    }
}

// C program to check whether a number if Armstrong or not.
void isAmstrongNum(int num){
    int rem, temp, sum=0, count=0;
    temp = num;
    while(temp>0){
        count++;
        temp/=10;
    }
    temp = num;
    while(temp>0){
        rem = temp%10;
        sum += pow(rem, count);
        temp/=10;
    }
    if(sum == num){
        printf("%d is amstrong Number\n", num);
    }else{
        printf("%d is not amstrong number\n",num);
    }
}

// C program to check whether a given number is EVEN or ODD
void isNum(int num){
    if(num%2==0){
        printf("%d is even\n",num);
    }else{
        printf("%d is Odd\n", num);
    }
}

// C program to print all leap years from 1 to N.
int isLeapYear(int year){
    if(((year%4==0) && (year % 100 !=0) | (year % 400==0))){
        return 1;
    }
    return 0;
}
void leapYears(int n1, int n2){
    for(int i= n1; i<=n2; i++){
        if(isLeapYear(i)==1){
            printf("%d\t",i);
        }
    }
    printf("\n");
}
// C program to convert temperature from Celsius to Fahrenheit and vice versa.
void fToc(float f){
    float c;
    c = (f-32)/1.8;
    printf("%.2f f is %.2f C\n", f, c); 
}
void cTof(float c){
    float f;
    f = (c*1.8)+32;
    printf("%.2f c is %.2f f\n", c, f); 
}
// C program to convert number from Decimal to Binary.
void decimalToBin(int num){
    int bin[32]={0};
    int count=0;

    while(num > 0){
        bin[count] = num%2;
        num/=2;
        count++;
    }
    for(int i=count-1; i>=0; i--){
        printf("%d \t", bin[i]);
    }
    printf("\n");
}

// C program to convert number from Binary to Decimal.
void binToDec(char* bin){
    int dec=0, count=0; 
    for(int i= strlen(bin)-1; i>=0; i--){
        dec = dec+(bin[i]-0x30)*pow((double)2, (double)count);
        count++;
    }
    printf("%d is decimal", dec);
}
// Program to compare two strings without using strcmp().
void strCmp(char * s1, char *s2){
    int flag=0;
    for(int i=0; s1[i]!='\0'; i++){
        if(s1[i]!=s2[i]){
            flag=1;
            break;
        }
    }
    if(flag==1){
        printf("%s is not equal %s\n",s1, s2);
    }
    printf("%s is equal\n", s1);
}
// Program to copy string without sing strcpy().
void strCopy(char *s1, char *s2){
    int i=0;
    while(s2[i]!='\0'){
        s1[i]=s2[i];
        i++;
    }
    s1[i]='\0';
    printf("%s copied from %s\n", s1, s2);
}

// C program to find a number from array elements
void findElem(int *arr, int item){
    int n = sizeof(arr)/sizeof(arr[0]);
    for(int i=0; i<n; i++){
        if(arr[i]==item){
            printf("%d is Found in Position %d\n", item, i+1);
        }
    }
    printf("%d is not present\n",item);
}

// C program to delete given element from one dimensional array
void deleteElement(int *arr, int elem){
    int count=0;
    int n = sizeof(arr)/sizeof(arr[0]);
    for(int i=0; i<n; i++){
        if(arr[i]==elem){
            count++;
            for(int j=i; j<n;j++)
                arr[j]=arr[j+1];
        }
    }
    n = sizeof(arr)/sizeof(arr[0]);
    printf("%d id deleted\n", elem);
    for(int j=0;j<n; j++){
        printf("%d \t", arr[j]);
    }
    printf("\n");

}

// Program to swap adjacent elements of one dimension array.
void swapAdjacent(int *arr){
    int n = sizeof(arr)/sizeof(arr[0]);

    if(n%2!=0){
        printf("the array should be even size");
    }else{
        for(int i=0; i<n; i+=2){
            int temp = arr[i];
            arr[i]=arr[i+1];
            arr[i+1]=temp;
        }
    }
    printf("After swapping\n");
    for(int i=0; i<n; i++){
        printf("%d \t", arr[i]);
    }
    printf("\n");

}
// Program to transpose a matrix.
void transposeMatrix(int m[][10], int row, int col){
    for(int i=0; i<col; i++){
        for(int j=0; j<row; j++){
            printf("%d\t",m[j][i]);
        }
        printf("\n");
    }
}

// C program to find multiplication of two matrices
void multiplicationMatrix(int a[][10], int b[][10], int r1, int r2, int c1, int c2){
    int res[10][10];
    if(r1!=c1){
        printf("Not possible\n");
    }else{
        for(int i=0; i<r1; i++){
            for(int j=0; j<c1; j++){
                res[i][j]=0;
                for(int k=0; k<c2; k++){
                    res[i][j]+=a[i][k]*b[k][j];
                }
            }
        }

        printf("Multiplaction\n");
        for(int i=0; i<r1; i++){
            for(int j=0; j<c1; j++){
                printf("%d\t", res[i][j]);
            }
            printf("\n");

        }
    }

}

// Program to print source code as program output.
void printFile(){
    FILE *fp;
    char c;

    fp = fopen("text.txt", "r");
    do{
        c= fgetc(fp);
        putchar(c);
    }while(c!=EOF);
    fclose(fp);
}

// C Example to subtract two integers without using Minus (-) operator
void subWithOutMinus(int a,int b){
    int sub;
    sub = a+~b+1;
    printf("%d - %d = %d",a,b, sub);
}
// C Example to Multiply two integers without using Mul (*) operator
void multiWithoutStart(int a, int b){
    int mul=0;
    for(int i=1; i<=b; i++){
        mul+=a;
    }
    printf("%d * %d = %d\n",a,b, mul);
}
// C program to convert a given number of days into days, weeks, and years
void daysto(int ndays){
    int years, weeks, days;
    years = ndays/365;
    weeks = (ndays%365)/7;
    days = (ndays%365)%7;
    printf("%d Years %d Weeks %d Months\n", years, weeks, days);
}
void rootsOfQuadraticEquation(float a, float b, float c){
    float rootA=0, rootB=0;
    float realp=0, imgp=0, disc=0;
    if(a==0 || b==0|| c==0){
        printf("Cant find Roots");
        return ;
    }
    disc = b*b - (4.0*a*c);
    if(disc < 0){
        printf("Imaginary Root\n");
        realp = -b/(2.0*a);
        imgp=sqrt(abs(disc))/(2.0*a);
        printf("Root1 = %f + i %f\n", realp, imgp);
        printf("Root2 = %f - i %f\n", realp, imgp);
    }
    else if( disc==0){
        printf("Roots are real  and equal");
        rootA = -b /(2.0*a);
        rootB=rootA;

        printf("Root1 = %f\n", rootA);
        printf("Root2 = %f\n", rootA);
    }else{
        printf("Roots are real  and distinct");
        rootA = (-b + sqrt(disc))/(2.0*a);
        rootB = (-b - sqrt(disc))/(2.0*a);
        printf("Root1 =  %f\n", rootA);
        printf("Root2 =  %f\n", rootB);
    }

}
// HCF
void hcf(int a, int b){
    if(a==0 || b==0){
        print('Not Possible');
    }else{
        while(b!=0){
            int temp = a%b;
            a = b;
            b =temp; 
        }
        printf("%d ", b);
    }

}
// C program to find the GCD (Greatest Common Divisor) of two integers
void gcd(int num1, int num2){
    int x, y, rem;
    if(num1>num2){
        x = num1;
        y = num2;
    }else{
        x=num2;
        y=num1;
    }

    rem = x%y;
    while(rem!=0){
        x=y;
        y=rem;
        rem = x%y;
    }
    printf("GCD of %d %d is %d\n", num1, num2, rem);
}
// C program to find the LCM (Lowest Common Multiple) of two integers
void lcm(int num1, int num2){
    int x, y, rem, lcm;
    if(num1>num2){
        x=num1;
        y = num2;
    }else{
        x=num2;
        y = num1;
    }
    rem = x%y;
    while(rem != 0){
        x=y;
        y=rem;
        rem = x%y;
    }
    lcm = num1*num2/y;

    printf("LCM of %d %d is %d\n", num1, num2, lcm);
}
// C program to calculate the addition of two complex numbers
typdef struct {
    int real;
    int img;
}complex;
void addComplex(complex num1, complex num2){
    complex num3;
    num3.real = num1.real+num2.real;
    num3.img = num1.img+num2.img;
    printf("%d+%di\n"num3.real, num3.img);
}
void main(){
    printf("%d", factorial(5));
    swapping(0x0C);
    swapWords(0x1234);
    swapNumbers(10,20);
    printf("Reverse Number is = %d\n", reverseNum(123));
    perfectSquare(16);
    HelloWorld();
    isPalandrome(101);
    isAmstrongNum(153);
    isAmstrongNum(1634);
    leapYears(2000, 2025);
    fToc(100);
    cTof(32);
    decimalToBin(5);
    binToDec("1001");
    char s1[30], s2[30];
    s1="kishore", s2="kishore";
    strCmp(s1, s2);
    s1="";
    s2="Kishore";
    strCopy(s1, s2);

    

}